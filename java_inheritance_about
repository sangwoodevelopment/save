package oop.inheritance;

/*
	<상속관계에서 생성자가 갖는 특징>
	1. 모든 클래스의 최상위클래스는 java.lang.Object클래스이다
	   => 자바에서는 객체가 갖는 공통의 특징을 java.lang.Object에 정의해놓고 상속하는 클래스가 없는 경우
	   	  컴파일러를 통해 자동으로 상속받도록 하고 있다.
	   => JVM에서 실행될때 문제가 없으려면 내부에서 인식하는 공통의 타입을 갖고 있어야 하며
	   	  이 타입이 java.lang.Object
	2. 상위클래스를 이용해서 객체를 생성하지 않고 하위클래스를 이용해서 객체를 생성해서 사용한다
		=> 상위클래스는 일반적인 내용을 담고 있는 클래스로 완성되지 않은 내용일 수 있으므로 모든 필드를 다 가지고 있는
		   하위클래스를 이용해서 객체를 생성하고 작업
		=> 부모가 갖고 있는 멤버변수는 자식객체를 통해서 전달받아 초기화
	3. 상위클래스의 객체가 메모리에 할당될 수 있도록 모든 생성자의 첫 번째 문장에는 super()가 생략되어 있다
	   즉, 부모클래스의 기본생성자를 호출하는 명령문이 생략
	   -----------------------
	   		super()
	   		
	   => 단, 명시적으로 생성자를 호출하는 명령문이 없는 경우
	4. 부모의 매개변수가 없는 생성자를 명시적으로 호출할 수 있다
	   super(매개변수1,매개변수2...)
	5. 생성자는 상속되지 않는다
*/
class SuperA extends Object{
	private String name;
	private String age;
	public SuperA() {
		System.out.println("부모의 생성자");
	}
	public SuperA(String name, String age) {
		super();//Object의 기본생성자를 호출
		this.name = name;
		this.age = age;
		System.out.println("부모의 매개변수 생성자");
	}
	
}
class SubA extends SuperA{
	String subdata;
	public SubA() {
		System.out.println("자식의 생성자");
	}
	public SubA(String name, String age, String subdata) {
		this.name = name;
		this.age = age;
		this.subdata = subdata;
	}
}
public class InheritanceTest3 {
	public static void main(String[] args) {
		SubA obj = new SubA();
		SubA obj2 = new SubA();
	}
}
